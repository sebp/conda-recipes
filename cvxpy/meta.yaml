{% set name = "cvxpy" %}
{% set version = "0.4.11" %}
{% set sha256 = "7523651f2c9a7a8f3b8e87038d6869c8d7f2bfa74dd3aadc71735f07c2f6eed2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}
#  patches:
   # List any patch files here
   # - fix.patch

build:
  # noarch_python: True
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - cvxpy = cvxpy:main
    #
    # Would create an entry point called cvxpy that calls cvxpy.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  number: 0
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
    - ecos >=2
    - scs >=1.1.3
    - multiprocess
    - fastcache
    - six
    - toolz
    - numpy >=1.9
    - scipy >=0.15
    - cvxcanon >=0.0.22

  run:
    - python
    - ecos >=2
    - scs >=1.1.3
    - multiprocess
    - fastcache
    - six
    - toolz
    - numpy >=1.9
    - scipy >=0.15
    - cvxcanon >=0.0.22

test:
  # Python imports
  imports:
    - cvxpy
    - cvxpy.atoms
    - cvxpy.atoms.affine
    - cvxpy.atoms.elementwise
    - cvxpy.constraints
    - cvxpy.expressions
    - cvxpy.expressions.constants
    - cvxpy.expressions.variables
    - cvxpy.interface
    - cvxpy.interface.numpy_interface
    - cvxpy.lin_ops
    - cvxpy.problems
    - cvxpy.problems.problem_data
    - cvxpy.problems.solvers
    - cvxpy.tests
    - cvxpy.transforms
    - cvxpy.utilities

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.
    # - nosetests cvxpy

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://github.com/cvxgrp/cvxpy/
  license: GPLv3
  summary: 'A domain-specific language for modeling convex optimization problems in Python.'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
