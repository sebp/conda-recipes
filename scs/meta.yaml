{% set name = "scs" %}
{% set version = "1.2.6" %}
{% set md5sum = "3eaa04ffa76aaf27dc8a8e608c6a9f12" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  md5: {{ md5sum }}
  patches:
   # List any patch files here
    - blas_mkl.patch

build:
  # noarch_python: True
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - scs = scs:main
    #
    # Would create an entry point called scs that calls scs.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  number: 4

requirements:
  build:
    - python {{ python }}
    - setuptools
    - numpy {{ numpy }}
    - scipy >=0.13.2
    - gcc

  run:
    - python {{ python }}
    - numpy {{ numpy }}
    - scipy >=0.13.2

test:
  # Python imports
  imports:
    - scs

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://github.com/cvxgrp/scs
  license: MIT
  summary: 'scs: splitting conic solver'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
